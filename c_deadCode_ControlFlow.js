//The code is obfuscated, but it can be deobfuscated as follows:


function _0x6dfb(_0x4de421, _0x50d7d1) {
    var _0x30a23d = ["\x31\x30\x30\x32", ...]; // an array of obfuscated strings
    _0x6dfb = function (_0x6dfbc3, _0x4cd50a) {
        _0x6dfbc3 = _0x6dfbc3 - 0x1f4;
        var _0x5e9d51 = _0x30a23d[_0x6dfbc3];
        return _0x5e9d51;
    };
    return _0x6dfb(_0x4de421, _0x50d7d1);
}

var _0x552326 = _0x6dfb;

(function (_0x417b15, _0x4a8f14) {
    var _0x1fd5af = _0x6dfb;
    var _0x71dac8 = _0x417b15();
    while (!![]) {
        try {
            var _0x3f12ff = parseInt(_0x1fd5af(0x1ff)) / 0x1 * (-parseInt(_0x1fd5af(0x208)) / 0x2) + -parseInt(_0x1fd5af(0x203)) / 0x3 + parseInt(_0x1fd5af(0x1fc)) / 0x4 * (parseInt(_0x1fd5af(0x1f8)) / 0x5) + -parseInt(_0x1fd5af(0x1f9)) / 0x6 + -parseInt(_0x1fd5af(0x205)) / 0x7 * (-parseInt(_0x1fd5af(0x200)) / 0x8) + -parseInt(_0x1fd5af(0x1fa)) / 0x9 + -parseInt(_0x1fd5af(0x206)) / 0xa * (-parseInt(_0x1fd5af(0x1f6)) / 0xb);
            if (_0x3f12ff === _0x4a8f14) {
                break;
            } else {
                _0x71dac8['push'](_0x71dac8['shift']());
            }
        } catch (_0x4eb56a) {
            _0x71dac8['push'](_0x71dac8['shift']());
        }
    }
}(_0x30a2, 0x3e89c));

var a = 0x5;
var b = 0xa;
var c = _0x552326(0x209);

function add(_0x18a50b, _0x2856fa) {
    return _0x18a50b + _0x2856fa;
}

function multiply(_0x4a0223, _0x2d5153) {
    return _0x4a0223 * _0x2d5153;
}

function divide(_0x44291e, _0x31af97) {
    return _0x44291e / _0x31af97;
}

function greet(_0x1e9b84) {
    console.log('Hello, ' + _0x1e9b84 + '!');
